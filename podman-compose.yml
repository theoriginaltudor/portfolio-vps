version: "3.8"

services:
  # 1. The PostgreSQL Database with pgvector
  postgres:
    image: ankane/pgvector:latest # A popular image with pgvector pre-installed
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data # Persist data in a named volume
    restart: always
    # IMPORTANT: No 'ports' section. The database is not exposed to the internet.

  # 2. The ASP.NET Backend API
  aspnet-api:
    build:
      context: ./aspnet-api # Tells podman to build the Dockerfile in this folder
    container_name: aspnet_api
    depends_on:
      - postgres # Ensures the database is started first
    environment:
      # Pass the connection string to your app
      ConnectionStrings__DefaultConnection: "Host=postgres; Port=5432; Database=${POSTGRES_DB}; Username=${POSTGRES_USER}; Password=${POSTGRES_PASSWORD}"
    restart: always
    # No 'ports' section. Only Nginx talks to this service.

  # 3. The Next.js Frontend
  nextjs-app:
    build:
      context: ./nextjs-app
    container_name: nextjs_frontend
    depends_on:
      - aspnet-api
    restart: always
    # No 'ports' section. Only Nginx talks to this service.

  # 4. The Nginx Reverse Proxy
  nginx:
    image: docker.io/library/nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"   # Expose port 80 to the world
      - "443:443" # Expose port 443 for future HTTPS
    volumes:
      # Mount our custom config file. The :Z is important for SELinux on some systems.
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:Z
    depends_on:
      - aspnet-api
      - nextjs-app
    restart: always

# Define the named volume for persistent database storage
volumes:
  pg_data: