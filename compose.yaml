version: "3.8"

services:
  postgres:
    image: ankane/pgvector:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: always

  aspnet-api:
    build:
      context: ./aspnet-api
    container_name: aspnet_api
    depends_on:
      - postgres
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres; Port=5432; Database=${POSTGRES_DB}; Username=${POSTGRES_USER}; Password=${POSTGRES_PASSWORD}"
    restart: always
    volumes:
      - ./aspnet-api/images:/app/images
    entrypoint: ["/app/entrypoint.sh"]

  nextjs-app:
    build:
      context: ./nextjs-app
    container_name: nextjs_frontend
    depends_on:
      - aspnet-api
    environment:
      # Browser should call same-origin /api (proxied by Nginx)
      NEXT_PUBLIC_API_URL: "/api"
      # Server-side (Node in the Next.js container) can talk directly to the API on the Docker network
      SERVER_API_URL: "http://aspnet-api:5000/api"
      NODE_ENV: "production"
    restart: always

  nginx:
    image: docker.io/library/nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:Z
      - ./aspnet-api/images:/usr/share/nginx/html/images:ro
    depends_on:
      - nextjs-app
    restart: always

volumes:
  pg_data:
